{"version":3,"sources":["store/config/actions.ts","store/config/types.ts","store/posts/actions.ts","store/posts/types.ts","components/PostList/ListItem.tsx","components/PostList/PostList.tsx","config.ts","components/Navbar/Navbar.tsx","components/Layout.tsx","pages/index.tsx","utils.ts","constant.ts","components/Article/Article.tsx","marked.ts","pages/post.tsx","App.tsx","network.ts","store/posts/saga.ts","store/config/saga.ts","store/sagas.ts","store/config/reducer.ts","store/posts/reducer.ts","store/reducers.ts","store/main.ts","serviceWorker.ts","index.tsx","components/Navbar/navbar.module.scss","components/PostList/listItem.module.scss","components/PostList/postList.module.scss","components/Article/article.module.scss"],"names":["setConfig","config","type","payload","getConfig","getContent","setContent","content","ListItem","props","className","styles","listItem","key","filePath","to","fileName","title","dayjs","created","format","connect","state","posts","list","postBody","map","post","githubConfig","navbar","navbarContainer","navbarTitle","navbarLinks","href","Layout","children","Index","React","store","getBaseUrl","Article","html","src","tokens","marked","lexer","imgLingReg","forEach","token","text","replace","match","p1","substring","Parser","parse","getDefaults","useEffect","window","Prism","highlightAll","markdownBody","dangerouslySetInnerHTML","__html","PostPage","this","getPost","params","filename","currentPost","App","dispatch","useDispatch","path","exact","component","getDrikConfig","baseUrl","axios","get","responseType","then","resp","data","yaml","load","getContentReq","getPostQeq","watchGetContentReq","watchGetPostReq","call","put","action","select","loaded","delay","p","find","MdPost","postContent","parseMarkdown","takeEvery","getDrikConfigReq","initApp","watchPostAction","watchInitApp","rootSaga","all","fork","initialState","author","directories","mode","sortBy","github","user","repo","initalState","modified","combineReducers","notFound","sagaMiddleware","createSagaMiddleware","createStore","reducers","composeWithDevTools","applyMiddleware","logger","run","sagas","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0225c12e.chunk.js","sourcesContent":["import {\n  ConfigState, SET_DRINK_CONFIG, GET_DRINK_CONFIG_REQ, INIT_APP,\n} from './types';\n\nexport function setConfig(config: ConfigState) {\n  return {\n    type: SET_DRINK_CONFIG,\n    payload: config,\n  };\n}\n\nexport function getConfig() {\n  return {\n    type: GET_DRINK_CONFIG_REQ,\n  };\n}\n\nexport function initApp() {\n  return {\n    type: INIT_APP,\n  };\n}\n","export const SET_DRINK_CONFIG = 'SET_DRINK_CONFIG';\n\nexport const GET_DRINK_CONFIG = 'GET_DRINK_CONFIG';\n\nexport const GET_DRINK_CONFIG_REQ = 'GET_DRINK_CONFIG_REQ';\n\nexport const INIT_APP = 'INIT_APP';\n\nexport interface ConfigState {\n  title: string;\n  author: string;\n  directories: string[];\n  mode: 'gitbook' | 'json';\n  sortBy: 'created' | 'modified';\n  github: {\n    user: string;\n    repo: string;\n  }\n}\n\n\nexport interface SetConfigAction {\n  type: typeof SET_DRINK_CONFIG,\n  payload: ConfigState,\n}\n\nexport interface GetConfigAction {\n  type: typeof GET_DRINK_CONFIG,\n}\n\nexport type ConfigActions = SetConfigAction | GetConfigAction;\n","import {\n  SET_CONTENT,\n  SET_POST,\n  NOT_FOUND_POST,\n  SetContentAction,\n  SetPostAction,\n  GET_CONTENT_JSON_REQ,\n  GET_POST_REQ,\n} from './types';\nimport { Post } from '../../types';\n\n\nexport function getContent() {\n  return {\n    type: GET_CONTENT_JSON_REQ,\n  };\n}\n\nexport function setContent(content: Post[]): SetContentAction {\n  return {\n    type: SET_CONTENT,\n    payload: content,\n  };\n}\n\nexport function getPost(fileName: string) {\n  return {\n    type: GET_POST_REQ,\n    payload: fileName,\n  };\n}\n\nexport function setPost(post: Post): SetPostAction {\n  return {\n    type: SET_POST,\n    payload: post,\n  };\n}\n\nexport function notFoundPost() {\n  return {\n    type: NOT_FOUND_POST,\n  };\n}\n","import { Post } from '../../types';\n\nexport const GET_CONTENT_JSON_REQ = 'GET_CONTENT_JSON_REQ';\n\nexport const GET_POST_REQ = 'GET_POST_REQ';\n\nexport const SET_CONTENT = 'SET_CONTENT';\n\nexport const SET_POST = 'SET_POST';\n\nexport const NOT_FOUND_POST = 'NOT_FOUND_POST';\n\nexport type PostState = {\n  currentPost: Post | { notFound: boolean };\n  list: Post[];\n  loaded: boolean;\n};\n\nexport interface GetPostAction {\n  type: typeof GET_POST_REQ,\n  payload: string;\n}\n\nexport interface SetContentAction {\n  type: typeof SET_CONTENT;\n  payload: Post[];\n}\n\nexport interface SetPostAction {\n  type: typeof SET_POST;\n  payload: Post;\n}\n\nexport interface NotFoundPost {\n  type: typeof NOT_FOUND_POST,\n}\nexport type PostActions = SetContentAction | SetPostAction | NotFoundPost;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { Post } from '../../types';\nimport styles from './listItem.module.scss';\n\ninterface Props extends Post {\n}\n\nconst ListItem: React.FC<Props> = props => (\n  <div className={styles.listItem} key={props.filePath}>\n    <h1><Link to={`post/${props.fileName}`}>{props.title}</Link></h1>\n    <p>\n      Wrote @\n      {' '}\n      {dayjs(props.created).format('YYYY-MM-DD')}\n    </p>\n  </div>\n);\n\nexport default ListItem;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport ListItem from './ListItem';\nimport { AppState } from '../../store/main';\nimport { Post } from '../../types';\nimport styles from './postList.module.scss';\n\nexport interface IPostListProps {\n  posts: Post[];\n}\n\nconst PostList: React.FC<IPostListProps> = props => (\n  <div className={styles.postBody}>\n    {props.posts.map(post => (\n      <ListItem {...post}>{post.title}</ListItem>\n    ))}\n  </div>\n);\n\nexport default connect((state: AppState) => ({ posts: state.posts.list }))(PostList);\n","export const githubConfig = {\n  user: 'yidafu',\n  repo: 'yidafu.github.io',\n  branch: 'default',\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { AppState } from '../../store/main';\nimport { ConfigState } from '../../store/config/types';\nimport styles from './navbar.module.scss';\nimport { githubConfig } from '../../config';\n\ninterface INavbarProps {\n  config: ConfigState;\n}\n\nconst Navbar: React.FC<INavbarProps> = props => (\n  <div className={styles.navbar}>\n    <div className={styles.navbarContainer}>\n      <h1 className={styles.navbarTitle}>\n        <Link to=\"/\">{props.config.title}</Link>\n      </h1>\n      <div className={styles.navbarLinks}>\n        <Link to=\"/\">Home</Link>\n        {/* <Link to=\"/about-me\">About Me</Link> */}\n        <a href={`https://www.github.com/${githubConfig.user}`}>Github</a>\n      </div>\n    </div>\n  </div>\n);\n\nexport default connect((state: AppState) => ({ config: state.config }))(Navbar);\n","import React from 'react';\nimport Navbar from './Navbar';\n\ninterface Props {\n\n}\n\nconst Layout: React.FC<Props> = props => (\n  <>\n    <Navbar />\n    {props.children}\n  </>\n);\n\nexport default Layout;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getContent, getConfig } from '../store/actions';\nimport { AppState } from '../store/main';\nimport { Post } from '../types';\nimport PostList from '../components/PostList';\nimport Layout from '../components/Layout';\n\nexport interface IIndexProps {\n  getContent: Function;\n  getConfig: Function;\n  config: any;\n  posts: Post[];\n}\n\nclass Index extends React.Component<IIndexProps> {\n  public render() {\n    return (\n      <Layout>\n        <PostList />\n      </Layout>\n    );\n  }\n}\n\nexport default connect((store: AppState) => ({ config: store.config, posts: store.posts.list }), { getContent, getConfig })(Index);\n","import { BASE_URL } from './constant';\nimport { githubConfig } from './config';\n\nexport function getBaseUrl() {\n  return process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3000'\n    : `${BASE_URL}/${githubConfig.user}/${githubConfig.repo}@${githubConfig.branch}`;\n}\n","export const DRINK_YAML = 'drink.yaml';\n\nexport const SUMMARY_MD = 'SUMMARY.md';\n\nexport const CONTENT_JSON = 'content.json';\n\nexport const BASE_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'https://cdn.jsdelivr.net/gh/';\n","import React, { useEffect } from 'react';\nimport marked from '../../marked';\n// ts-ignore\nimport { Post } from '../../types';\nimport styles from './article.module.scss';\n\ninterface Props extends Post {\n\n}\n\nconst Article: React.FC<Props> = props => {\n  const html = marked(props.content || '');\n  useEffect(() => {\n    (window as any).Prism && (window as any).Prism.highlightAll();\n  });\n  return (\n    <article\n      className={`markdown-body ${styles.markdownBody}`}\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n};\n\nexport default Article;\n","import marked from 'marked';\nimport { getBaseUrl } from './utils';\n\nexport default function parseMarkdown(src: string) {\n  const tokens = marked.lexer(src);\n  const imgLingReg = /!\\[\\]\\((.+?)\\)/;\n  tokens.forEach(token => {\n    if (token.type === 'paragraph') {\n      // const res = imgLingReg.exec();\n      // eslint-disable-next-line no-param-reassign\n      token.text = token.text.replace(imgLingReg, (match, p1) => `![](${getBaseUrl()}/posts${p1.substring(1)})`);\n    }\n  });\n  return marked.Parser.parse(\n    tokens,\n    (marked as any).getDefaults(),\n  );\n}\n","import * as React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Layout from '../components/Layout';\nimport Article from '../components/Article';\nimport { AppState } from '../store/main';\nimport { getPost } from '../store/actions';\nimport { Post } from '../types';\nimport 'github-markdown-css/github-markdown.css';\n\nexport interface IPostProps {\n  match: any;\n  getPost: Function;\n  post: Post | { notFound: boolean },\n}\n\nclass PostPage extends React.Component<IPostProps> {\n  componentDidMount() {\n    this.props.getPost(this.props.match.params.filename);\n  }\n\n  public render() {\n    const { post } = this.props;\n    return (\n      <Layout>\n        {!post && typeof (post as Post).title === 'undefined'\n          ? <Redirect to=\"/404\" />\n          : <Article {...(post as Post)} />}\n      </Layout>\n    );\n  }\n}\n\n\nexport default connect((state: AppState) => ({ post: state.posts.currentPost }), { getPost })(PostPage);\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport Index from './pages/index';\nimport PostPage from './pages/post';\nimport './App.css';\nimport { getConfig, getContent } from './store/actions';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  dispatch(getConfig());\n  dispatch(getContent());\n\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/post/:filename\" component={PostPage} />\n    </Router>\n  );\n};\n\nexport default App;\n","import axios from 'axios';\nimport yaml from 'js-yaml';\nimport { DRINK_YAML, CONTENT_JSON } from './constant';\nimport { IContentJSON } from './types';\nimport { getBaseUrl } from './utils';\n\n\nexport function getDrikConfig(): Promise<any> {\n  const baseUrl = getBaseUrl();\n  return axios.get(`${baseUrl}/${DRINK_YAML}`, {\n    responseType: 'text',\n  }).then(resp => {\n    if (resp && resp.data) {\n      return yaml.load(resp.data);\n    }\n    return {};\n  });\n}\n\n\nexport function getContent() {\n  const baseUrl = getBaseUrl();\n  return axios.get<IContentJSON>(`${baseUrl}/${CONTENT_JSON}`, {\n    responseType: 'text',\n  }).then(resp => {\n    if (resp && resp.data) {\n      return resp.data.content;\n    }\n    return [];\n  });\n}\n\nexport function getPost(filePath: string) {\n  const baseUrl = getBaseUrl();\n  return axios.get(`${baseUrl}/${filePath}`, {\n    responseType: 'text',\n  }).then(resp => {\n    if (resp && resp.data) {\n      return resp.data;\n    }\n    return '';\n  });\n}\n","import {\n  put, takeEvery, call, delay, select,\n} from 'redux-saga/effects';\nimport { parseMarkdown } from '@dovyih/nice-drink-cli/lib/utils.js';\nimport { getContent, getPost } from '../../network';\nimport { setContent, setPost, notFoundPost } from './actions';\nimport { GET_CONTENT_JSON_REQ, GET_POST_REQ, GetPostAction } from './types';\nimport { AppState } from '../main';\nimport { Post } from '../../types';\n\n\nexport function* getContentReq() {\n  const content = yield call(getContent);\n  yield put(setContent(content));\n}\n\nexport function* getPostQeq(action: GetPostAction) {\n  // let loaded = false;\n  const loaded = yield select((state: AppState) => state.posts.loaded);\n  if (!loaded) {\n    yield delay(500);\n  }\n  // FIXME: getPostQeq may been called before SET_CONTENT\n  const posts: Post[] = yield select((state: AppState) => state.posts.list);\n  const p = posts.find(p => p.fileName === action.payload);\n  if (p) {\n    let MdPost: Post = {} as Post;\n    if (!p.content) {\n      const postContent = yield call(getPost, p.filePath);\n      MdPost = parseMarkdown(postContent);\n      MdPost.filePath = p.filePath;\n      MdPost.fileName = action.payload;\n    } else {\n      MdPost = p;\n    }\n    yield put(setPost(MdPost));\n  } else {\n    yield put(notFoundPost());\n  }\n}\n\nexport function* watchGetContentReq() {\n  yield takeEvery(GET_CONTENT_JSON_REQ, getContentReq);\n}\n\nexport function* watchGetPostReq() {\n  yield takeEvery(GET_POST_REQ, getPostQeq);\n}\n","\nimport {\n  put, takeEvery, call,\n} from 'redux-saga/effects';\nimport { getDrikConfig } from '../../network';\nimport { GET_DRINK_CONFIG_REQ, INIT_APP } from './types';\nimport { setConfig } from './actions';\nimport { getContentReq } from '../posts/saga';\n\nexport function* getDrikConfigReq() {\n  const config = yield call(getDrikConfig);\n  yield put(setConfig(config));\n}\n\nexport function* initApp() {\n  yield getDrikConfig();\n  yield getContentReq();\n  // yield put(setConfig(config));\n}\n\nexport function* watchPostAction() {\n  yield takeEvery(GET_DRINK_CONFIG_REQ, getDrikConfigReq);\n}\n\nexport function* watchInitApp() {\n  yield takeEvery(INIT_APP, initApp);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { watchPostAction, watchInitApp } from './config/saga';\nimport { watchGetContentReq, watchGetPostReq } from './posts/saga';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchPostAction),\n    fork(watchInitApp),\n    fork(watchGetContentReq),\n    fork(watchGetPostReq),\n  ]);\n}\n","import { SET_DRINK_CONFIG, ConfigState, ConfigActions } from './types';\n\nconst initialState: ConfigState = {\n  title: '',\n  author: '',\n  directories: [],\n  mode: 'gitbook',\n  sortBy: 'created',\n  github: {\n    user: '',\n    repo: '',\n  },\n};\n\nexport default function config(state = initialState, action: ConfigActions): ConfigState {\n  switch (action.type) {\n    case SET_DRINK_CONFIG:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import {\n  PostActions, PostState, SET_CONTENT, SET_POST, NOT_FOUND_POST,\n} from './types';\n\nconst initalState: PostState = {\n  currentPost: {\n    title: '',\n    author: '',\n    created: '',\n    modified: '',\n    fileName: '',\n    filePath: '',\n  },\n  list: [],\n  loaded: false,\n};\n\nexport default function posts(state = initalState, action: PostActions) {\n  switch (action.type) {\n    case SET_CONTENT:\n      return {\n        currentPost: state.currentPost,\n        list: action.payload,\n        loaded: true,\n      };\n    case SET_POST:\n      return {\n        currentPost: action.payload,\n        loaded: state.loaded,\n        list: state.list.map(post => {\n          if (post.filePath === action.payload.filePath) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    case NOT_FOUND_POST:\n      return {\n        loaded: state.loaded,\n        list: state.list,\n        currentPost: { notFound: true },\n      };\n    default: return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport config from './config/reducer';\nimport posts from './posts/reducer';\n\nexport default combineReducers({\n  posts,\n  config,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport sagas from './sagas';\nimport reducers from './reducers';\nimport { ConfigState } from './config/types';\nimport { PostState } from './posts/types';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware, logger),\n  ),\n);\n\nsagaMiddleware.run(sagas);\n\nexport default store;\n\nexport interface AppState {\n  config: ConfigState,\n  posts: PostState,\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/main';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navbar_navbar__1pbIf\",\"navbarContainer\":\"navbar_navbarContainer__tyuQa\",\"navbarTitle\":\"navbar_navbarTitle__3H2-l\",\"navbarLinks\":\"navbar_navbarLinks__3LGxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"listItem_listItem__gxhYg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBody\":\"postList_postBody__1usi9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownBody\":\"article_markdownBody__2eZGy\"};"],"sourceRoot":""}